version: "3"

networks:
  backend:
    external: false
  internal:
    external: false
    driver: bridge

services:
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--providers.providersThrottleDuration=100s"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - /var/rim/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.tls=true
      - traefik.docker.network=backend
      - traefik.http.routers.traefik.tls.certresolver=myresolver
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
    networks:
      - backend
    restart: on-failure
    env_file:
      - .env-staging

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.tls=true
      - traefik.docker.network=backend
      - traefik.http.routers.whoami.tls.certresolver=myresolver
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)
      - traefik.http.services.whoami.entrypoints=websecure
    networks:
      - backend
    restart: on-failure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command:  sh -c "alembic check || (alembic revision --autogenerate && alembic upgrade head) || alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8080 --reload"
    volumes:
      - ./backend:/app
    depends_on:
      - db
    restart: on-failure
    env_file:
      - .env-staging
    networks:
      - backend
      - internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.rule=Host(`api.${DOMAIN}`)
      - traefik.docker.network=backend
      - traefik.http.routers.backend.tls.certresolver=myresolver
      - traefik.http.services.backend.loadbalancer.server.port=8080
      
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: on-failure
    networks:
      - internal
    labels:
      - traefik.enable=false

volumes:
  postgres-data: